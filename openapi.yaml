openapi: 3.1.0
info:
  title: JS Programming Labs
  description: server side backend renderer
  version: 1.0.0
paths:
  /api/v1/participant:
    get:
      tags:
        - lottery
      summary: Get all participants
      description: Retrieve all participants.
      operationId: get_participants_list_api_v1_participant_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ParticipantResponse'
                type: array
                title: Response Get Participants List Api V1 Participant Get
    post:
      tags:
        - lottery
      summary: Create a new participant
      description: Registers a new participant. Raises 400 if already exists.
      operationId: create_ballot_api_v1_participant_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantCreate'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/participant/{user_id}:
    get:
      tags:
        - lottery
      summary: Get a Participant by its ID
      description: Retrieve participant by id.
      operationId: get_participant_by_id_api_v1_participant__user_id__get
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            title: User Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ParticipantResponse'
                  - type: 'null'
                title: Response Get Participant By Id Api V1 Participant  User Id  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/lottery:
    get:
      tags:
        - lottery
      summary: List all lotteries
      description: Retrieves a list of all lotteries.
      operationId: list_all_lotteries_api_v1_lottery_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LotteryResponse'
                type: array
                title: Response List All Lotteries Api V1 Lottery Get
    post:
      tags:
        - lottery
      summary: Create a new lottery
      description: |-
        Creates a new lottery for the specified date.
        - `target_date`: The date for which the lottery is to be created.
        - `closed`: (Optional) Whether the lottery should be created in a closed state. Defaults to false.

        Raises:
        - `409 Conflict`: If a lottery for the given date already exists.
        - `400 Bad Request`: If there's an issue with creating the lottery (e.g., repository error).
      operationId: create_lottery_api_v1_lottery_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLotteryRequest'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LotteryResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/lottery/close:
    post:
      tags:
        - lottery
      summary: Close lottery and Draw Winner Ballot
      description: Closes lottery and Draws winner. Raises 400 if already exists.
      operationId: close_lottery_and_draw_api_v1_lottery_close_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinningBallotResponse'
  /api/v1/lottery/open:
    get:
      tags:
        - lottery
      summary: List all open lotteries
      description: Retrieves a list of all lotteries that are currently open (not closed).
      operationId: list_open_lotteries_api_v1_lottery_open_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LotteryResponse'
                type: array
                title: Response List Open Lotteries Api V1 Lottery Open Get
  /api/v1/lottery/active-today:
    get:
      tags:
        - lottery
      summary: Get today's active lottery
      description: |-
        Retrieves the active (open) lottery for the current date.
        Returns the lottery details if found and open, otherwise returns null/None.
      operationId: get_todays_active_lottery_api_v1_lottery_active_today_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/LotteryResponse'
                  - type: 'null'
                title: Response Get Todays Active Lottery Api V1 Lottery Active Today Get
  /api/v1/lottery/{lottery_id}:
    get:
      tags:
        - lottery
      summary: Get a lottery by its ID
      description: |-
        Retrieves a specific lottery by its unique ID.

        Raises:
        - `404 Not Found`: If the lottery with the given ID does not exist.
      operationId: get_lottery_api_v1_lottery__lottery_id__get
      parameters:
        - name: lottery_id
          in: path
          required: true
          schema:
            type: integer
            title: Lottery Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LotteryResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/lottery/by-date/{target_date}:
    get:
      tags:
        - lottery
      summary: Get a lottery by its date
      description: |-
        Retrieves a specific lottery by its date.

        Raises:
        - `404 Not Found`: If no lottery exists for the given date.
      operationId: get_lottery_by_date_api_v1_lottery_by_date__target_date__get
      parameters:
        - name: target_date
          in: path
          required: true
          schema:
            type: string
            format: date
            title: Target Date
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LotteryResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/ballot/{user_id}:
    post:
      tags:
        - lottery
      summary: Create a new ballot
      description: Registers a new ballot. Raises 400 if already exists.
      operationId: create_ballot_api_v1_ballot__user_id__post
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            title: User Id
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BallotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    get:
      tags:
        - lottery
      summary: List of ballots per user
      description: Lists Ballots by UserID. Raises 404 if list is empty.
      operationId: list_ballots_by_user_api_v1_ballot__user_id__get
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            title: User Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BallotResponse'
                title: Response List Ballots By User Api V1 Ballot  User Id  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/ballot:
    post:
      tags:
        - lottery
      summary: Create a new ballot with a specific expiry date
      description: Registers a new ballot. Raises 400 if already exists.
      operationId: create_ballot_with_expiry_date_api_v1_ballot_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BallotCreate'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BallotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/winner-ballot:
    get:
      tags:
        - lottery
      summary: Get all winning ballots
      description: Get all winning ballots.
      operationId: get_all_winners_api_v1_winner_ballot_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WinningBallotResponse'
                type: array
                title: Response Get All Winners Api V1 Winner Ballot Get
  /api/v1/winner-ballot/by-date:
    get:
      tags:
        - lottery
      summary: Get a winner by a given winning date
      description: Get a winning ballot by Date. Raises 400 if already exists.
      operationId: get_winner_by_winning_date_api_v1_winner_ballot_by_date_get
      parameters:
        - name: winning_date
          in: query
          required: true
          schema:
            type: string
            format: date
            title: Winning Date
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinningBallotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/winner-ballot/{lottery_id}:
    get:
      tags:
        - lottery
      summary: Get a winner by a given winning lottery ID
      description: Get a winning lottery by ID. Raises 400 if already exists.
      operationId: get_winner_by_lottery_id_api_v1_winner_ballot__lottery_id__get
      parameters:
        - name: lottery_id
          in: path
          required: true
          schema:
            type: integer
            title: Lottery Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WinningBallotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    BallotCreate:
      properties:
        user_id:
          type: integer
          title: User Id
          description: ID of the Participant who owns this ballot
        lottery_id:
          type: integer
          title: Lottery Id
          description: ID of the Lottery this ballot belongs to
        expiry_date:
          type: string
          format: date
          title: Expiry Date
          description: Date when this ballot expires. This field is optional.
          example: '2025-05-15'
      type: object
      required:
        - user_id
        - lottery_id
      title: BallotCreate
    BallotResponse:
      properties:
        ballot_id:
          type: integer
          title: Ballot Id
          description: Primary key of the ballot
        user_id:
          type: integer
          title: User Id
          description: ID of the Participant who owns this ballot
        lottery_id:
          type: integer
          title: Lottery Id
          description: ID of the Lottery this ballot belongs to
        ballot_number:
          type: integer
          title: Ballot Number
          description: Number assigned to the ballot. Can be None.
        expiry_date:
          type: string
          format: date
          title: Expiry Date
          description: Date when this ballot expires. Can be None.
          example: '2025-05-15'
      type: object
      required:
        - ballot_id
        - user_id
        - lottery_id
      title: BallotResponse
    CreateLotteryRequest:
      properties:
        target_date:
          type: string
          format: date
          title: Target Date
      type: object
      required:
        - target_date
      title: CreateLotteryRequest
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    LotteryResponse:
      properties:
        lottery_id:
          type: integer
          title: Lottery Id
          example: '123'
        lottery_date:
          type: string
          format: date
          title: Lottery Date
          example: '2025-05-15'
        closed:
          type: boolean
          title: Closed
          example: 'false'
      type: object
      required:
        - lottery_id
        - lottery_date
        - closed
      title: LotteryResponse
    ParticipantCreate:
      properties:
        first_name:
          type: string
          title: First Name
          example: Alice
        last_name:
          type: string
          title: Last Name
          example: Smith
        birth_date:
          type: string
          format: date
          title: Birth Date
          example: '2025-05-15'
      type: object
      required:
        - first_name
        - last_name
        - birth_date
      title: ParticipantCreate
    ParticipantResponse:
      properties:
        user_id:
          type: integer
          title: User Id
          example: 231
        first_name:
          type: string
          title: First Name
          example: Alice
        last_name:
          type: string
          title: Last Name
          example: Smith
        birth_date:
          type: string
          format: date
          title: Birth Date
          example: '2025-05-15'
      type: object
      required:
        - user_id
        - first_name
        - last_name
        - birth_date
      title: ParticipantResponse
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    WinningBallotResponse:
      properties:
        lottery_id:
          type: integer
          title: Lottery Id
          example: '123'
        ballot_id:
          type: integer
          title: Ballot Id
          example: '123'
        winning_date:
          type: string
          format: date
          title: Winning Date
          example: '2025-05-15'
        winning_amount:
          type: integer
          title: Winning Amount
          example: '123'
      type: object
      required:
        - lottery_id
        - ballot_id
        - winning_date
        - winning_amount
      title: WinningBallotResponse
